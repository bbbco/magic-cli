#!/usr/bin/env ruby
# Installs the latest version of these tools.
# @param [<branch>] - Checks out the magic-cli branch to install

# Be careful not to put anything in this script that would require any extra dependencies
# that would require Bundler or another external reference here, as sometimes this script
# is run independently from any other scripts in this repo.

require 'tmpdir'
require 'shellwords'
require 'yaml'

# Have to use #load because the file does not have a .rb extension
load './magic-cli'

DESTINATION_DIR = File.dirname(__FILE__)

#
# Update this to point to wherever you're hosting your tools. If you're not hosting with git,
# change the `fetch_latest_code!` function below to suit your scenario.
#
SOURCE_REPO = MagicCli::SOURCE_REPO

#
# This message is shown if updating the tools fails for any reason; you can customize this to tell
# people where to go ask for help if they encounter trouble.
#
UPDATE_FAILED_MESSAGE = "The system is down. The system is down. Woo woo, woo woo.\n\nYou may need to run this command as `sudo` if you have not ensured that #{DESTINATION_DIR} is writable."

#
# Gets the latest version of the tools and copies them into the current working directory.
#
def fetch_latest_code!
  puts "Fetching #{SOURCE_REPO} ..."
  `git clone --quiet #{Shellwords.escape(SOURCE_REPO)} . || $(which bash) -xc "git clone #{Shellwords.escape(SOURCE_REPO)} ."`
end

def checkout_branch!(branch)
  `git checkout #{branch} 2> /dev/null`
  puts "Checking out branch #{branch}"
  unless $?.exitstatus == 0
    puts "Could not find branch #{branch} on the #{SOURCE_REPO} git repository. Aborting."
    abort
  end
end


#
# Returns an array containing the time the tools were updated and which version they are now at.
#
def get_tools_version_info
  timestamp, sha1 = `git log -1 --pretty='%at,%h'`.strip.split(',')

  [ Time.at(timestamp.to_i), sha1 ]
end


unless File.stat(DESTINATION_DIR).writable?
  puts "Looks like you don't have write permissions to #{DESTINATION_DIR}. Run this command to fix it and try again:"
  puts "    sudo chown -R `whoami` #{DESTINATION_DIR}"
  abort
end

Dir.mktmpdir  do |dir|
  Dir.chdir dir do

    fetch_latest_code!
    if ARGV
      checkout_branch! ARGV.first
    end

    timestamp, version = get_tools_version_info
    File.open("#{MagicCli::BASENAME}-version", "w") do |f|
      f.write("#!/bin/bash\n")
      f.write("# Returns the version and timestamp of the local repo hosted at #{SOURCE_REPO}\n")
      f.write("\n")
      f.write("echo \"version: #{version}\"\n")
      f.write("echo \"timestamp: #{timestamp}\"\n")
    end

    unless system("which make > /dev/null 2>&1")
      puts "Looks like you don't have `make`! Try installing it first before continuing."
      abort
    end

    if ENV['DEBUG'].eql?("true")
      print `pwd; ls -al`
    end

    puts "Installing ..."
    if ENV['DEBUG'].eql?("true")
      install_output = `make install`
      puts install_output
    else 
      install_output = `make install_quiet`
      if $?.exitstatus == 0
        puts "*** Updated tools to #{version} (#{timestamp}) ***"
        puts ""
        puts `#{MagicCli::BASENAME}`
      else
        puts install_output
        puts "--------------------------------------------------------------"
        puts "Eep, updating tools failed. :( \n#{UPDATE_FAILED_MESSAGE}"
        abort
      end
    end
  end
end
